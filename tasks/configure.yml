---
- name: Get Synchronisation Source State
  win_shell: |
    (Get-WsusServer).GetConfiguration().SyncFromMicrosoftUpdate
  register: wsus_sync_source_state_raw

- name: Get All Languages Enabled State
  win_shell: |
    (Get-WsusServer).GetConfiguration().AllUpdateLanguagesEnabled
  register: wsus_all_languages_enabled_raw

- name: Get Last Sync Year
  win_shell: |
    (Get-WsusServer).GetSubscription().LastModifiedTime.Year
  register: wsus_last_sync_year_raw

- name: wsus_facts
  set_fact:
      wsus_sync_source_state: "{{ wsus_sync_source_state_raw.stdout | trim }}"
      wsus_all_languages_enabled: "{{ wsus_all_languages_enabled_raw.stdout | trim }}"
      wsus_last_sync_year: "{{ wsus_last_sync_year_raw | trim }}"

- debug:
  msg: "{{wsus_all_languages_enabled}}"

- debug:
    msg: "The WSUS Sync Source is: {{ wsus_sync_source_state }}"

- name: Create content folder
  win_file:
    path: "{{ content_folder }}"
    state: directory

- name: Set content folder in WSUS
  win_command: 'WsusUtil.exe postinstall CONTENT_DIR={{ content_folder }}'
  args:
      chdir: 'C:\Program Files\Update Services\Tools'
      creates: '{{ content_folder }}\WsusContent'

- name: Set WSUS to synchronise from Microsoft Updats
  win_shell: |
    Set-WsusServerSynchronization -SyncFromMU
  when:  (wsus_sync_source_state)  == "True"

- name: Set Updates to English Only
  win_shell: |
    $wsusconfig = (Get-WsusServer).GetConfiguration()
    $wsusconfig.AllUpdateLanguagesEnabled = $false
    $wsusconfig.SetEnabledUpdateLanguages("en")
    $wsusconfig.Save()
  when: (wsus_all_languages_enabled) == "True"

- name: Do initial synchronisation to get latest categories
  win_shell: |
    $wsussubscription = (Get-WSUSServer).GetSubscription()
    $wsussubscription.StartSynchronizationForCategoryOnly()
  when: (wsus_last_sync_year) == "0001"

- name: Disable all classifications
  win_shell: |
    Get-WsusClassification | Set-WsusClassification -Disable

- name: Set classifications -> loop
  win_shell: |
    Get-WsusClassification | Where-Object -FilterScript {$_.Classification.Title -Eq "{{ item }}"} | Set-WsusClassification
  loop: "{{ classification_list|flatten(levels=1) }}"

- name: Disable All Products
  win_shell: |
    Get-WsusProduct | Set-WsusProduct -Disable

- name: Set products to synchronise -> loop
  win_shell: |
    Get-WSUSProduct | Where-Object -FilterScript {$_.product.title -eq "{{ item }}" } | Set-WsusProduct
  loop: "{{ products_list|flatten(levels=1) }}"
